# coding: utf-8
# Author: Dunkle Qiu

import hmac
import base64
import textwrap
from .base import set_log, LOG_LEVEL, NS, MP
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from hashlib import sha1
from paramiko import SSHClient, AutoAddPolicy, RSAKey

ssh_logger = set_log(LOG_LEVEL, filename='ssh.log', logger_name='ssh')


def gen_rsakey(bit=2048):
    return RSAKey.generate(bit)


def get_rsakey_from_string(private_key_string, passphrase=None):
    ssh_logger.info("Load private key:\n" + private_key_string)
    rsa = RSA.importKey(private_key_string, passphrase=passphrase)
    key = RSAKey(vals=(rsa.e, rsa.n))
    key.d = rsa.d
    key.p = rsa.p
    key.q = rsa.q
    key.u = rsa.u
    key.keydata = ['n', 'e', 'd', 'p', 'q', 'u']
    return key


def get_key_string(key, privatekey=True, passphrase=None):
    rsa = RSA.construct((key.n, key.e, key.d, key.p, key.q))
    if privatekey:
        return rsa.exportKey(passphrase=passphrase)
    else:
        return rsa.exportKey('OpenSSH')


def ssh_connect(host, username, **kwargs):
    charset = "en_US.UTF-8"
    client = None
    try:
        client = SSHClient()
        client.set_missing_host_key_policy(AutoAddPolicy())
        client.connect(host, username=username, **kwargs)
        stdin, stdout, stderr = client.exec_command("export LANG=%s" % charset)
        stdout.read()
    except Exception, e:
        ssh_logger.error("ssh_connect %s@%s:%s" % (username, host, e))
        client.close()
    return client


# chevah source
PUTTY_HMAC_KEY = 'putty-private-key-file-mac-key'


def _getPuttyAES256EncryptionKey(passphrase):
    """
    Return the encryption key used in Putty AES 256 cipher.
    """
    key_size = 32
    part_1 = sha1(b'\x00\x00\x00\x00' + passphrase).digest()
    part_2 = sha1(b'\x00\x00\x00\x01' + passphrase).digest()
    return (part_1 + part_2)[:key_size]


def toString_PUTTY_private(key, passphrase, extra_comment=""):
    """
    Return the Putty private key representation.
    """
    aes_block_size = 16
    lines = []
    key_type = b'ssh-rsa'
    comment = '===Key Generated by ITMSP=== ' + extra_comment
    data = {}
    for name in key.keydata:
        value = getattr(key, name, None)
        if value is not None:
            data[name] = value
    hmac_key = PUTTY_HMAC_KEY
    if passphrase:
        encryption_type = b'aes256-cbc'
        hmac_key += passphrase
    else:
        encryption_type = 'none'
    if key_type == b'ssh-rsa':
        public_blob = (
            NS(key_type) +
            MP(data['e']) +
            MP(data['n'])
        )
        private_blob = (
            MP(data['d']) +
            MP(data['q']) +
            MP(data['p']) +
            MP(data['u'])
        )
    else:  # pragma: no cover
        raise Exception('Unsupported key type.')
    private_blob_plain = private_blob
    private_blob_encrypted = private_blob
    if passphrase:
        # Encryption is requested.
        # Padding is required for encryption.
        padding_size = -1 * (
            (len(private_blob) % aes_block_size) - aes_block_size)
        private_blob_plain += b'\x00' * padding_size
        encryption_key = _getPuttyAES256EncryptionKey(passphrase)
        private_blob_encrypted = AES.new(
            encryption_key, mode=AES.MODE_CBC, IV=b'\x00' * aes_block_size,
        ).encrypt(private_blob_plain)

    public_lines = textwrap.wrap(base64.b64encode(public_blob), 64)
    private_lines = textwrap.wrap(
        base64.b64encode(private_blob_encrypted), 64)

    hmac_data = (
        NS(key_type) +
        NS(encryption_type) +
        NS(comment) +
        NS(public_blob) +
        NS(private_blob_plain)
    )
    hmac_key = sha1(hmac_key).digest()
    private_mac = hmac.new(hmac_key, hmac_data, sha1).hexdigest()

    lines.append('PuTTY-User-Key-File-2: %s' % key_type)
    lines.append('Encryption: %s' % encryption_type)
    lines.append('Comment: %s' % comment)
    lines.append('Public-Lines: %s' % len(public_lines))
    lines.extend(public_lines)
    lines.append('Private-Lines: %s' % len(private_lines))
    lines.extend(private_lines)
    lines.append('Private-MAC: %s' % private_mac)
    return '\r\n'.join(lines)
